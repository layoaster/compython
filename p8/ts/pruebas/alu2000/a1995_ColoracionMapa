{*****************************************************************************
	INTRODUCCION A LOS COMPILADORES 1

	PRACTICA 1. Introducci¢n al lenguaje PASCAL-.

    Autor: Fernando Alesanco P‚rez
    Fecha: 19 de Octubre de 2000.

    Objetivo: Familiarizarse con el lenguaje Pascal- mediante la realizaci¢n
		  y compilaci¢n de un programa en este lenguaje.

    Programa implementado en lenguaje PASCAL-:
		"Algoritmo de la m¡nima coloraci¢n"

		Dado un grafo no dirigido trata de encontrar una coloraci¢n de sus
	nodos de manera que dos nodos adyacentes no tengan el mismo color
	usando el menor n£mero de colores posible.

	Ejemplos de aplicacion del algoritmo:
			-Coloraci¢n de los paises en un mapa.
			-Coloraci¢n de bloques de edificios.

	Modo de utilizaci¢n:
	    El programa espera en la entrada a la introducci¢n del grafo.
	    Forma de introducci¢n del grafo:
			Numero entero que representa los nodos adyacentes al actual.
			"-1" para pasar al siguiente nodo.
			"-2" para terminar la introducci¢n de datos y comenzar la
			 ejecucion del programa.

		Ejemplo:
			1-> 2,3,4
			2-> 1
			3-> 1
			4-> 1
			
			Se introduce:	
			2
			3
			4
			-1
			1
			-1
			1
			-1
			1
			-1
			-2

	    Salida del programa:
		Array con la mejor coloraci¢n.
			Numero de color de cada nodo en orden ascendente y sepa-
			rados por ceros.

*****************************************************************************}
program mincolor;

const MAXNODOS = 10;    {N£mero m ximo de nodos}
      {NIL = -1;}		{La version dos no lo admite}

type 
    A = array[1..MAXNODOS] of integer;          {Array de enteros}
    listaady = array[1..MAXNODOS] of A;         {Lista de nodos adyacentes}

var
    color,			{Array con la coloracion actual} 
    mejorcolor: A;              {Mejorcoloracion disponible hasta el
				 momento}
    ady: listaady;		{Grafo con la lista de nodos adyacentes}
    numnodos, 			{Numero de nodos dl grafo} 
    niveloptimo: integer;       {Menor numero de colores que se ha podido
				 encontrar}

{*****************************************************************************
	Procedimiento pedirdatos:

	Pide la lista de los nodos adyacentes del grafo.
*****************************************************************************}
procedure pedirdatos;

var
    num, i, j: integer;

begin
    num := 1;
    i := 1;
    j := 1;
    while (num <> -2) do
       begin
	   read(num);
	   if (num <> -1) and (num <> -2) then
	      begin
		 ady[i][j] := num;
		 j := j + 1;
	      end
	   else
	      begin
		 ady[i][j] := -1;
		 j := 1;
		 i := i + 1;
	      end;
       end;
   numnodos := i - 2;
   while (i <> MAXNODOS) do
      begin
	 ady[i][j] := -1;
	 i := i + 1;
      end;
end;

{*****************************************************************************
	Procedimiento mostrarresultados:

	Muestra la lista de la mejor coloracion.
*****************************************************************************}
procedure mostrarresultados;

var
    i, j, k: integer;

begin
   write (0);
   i := 1;
   while (i <= numnodos) do
      begin
	 write(mejorcolor[i]);
	 write(0);
	 i := i + 1;
      end;
end;

{*****************************************************************************
	Procedimiento essolucion:

	Indica si la solucion actual es factible.

	Parametros: k -> Nodo que se esta tratando.
			    solucion -> Variable booleana que indica si la
				solucion es factible.
*****************************************************************************}
procedure essolucion (k: integer;var solucion: boolean);

var
	i, j: integer;

begin
	i := 1;
	solucion := TRUE;
	while (ady[k][i] <> -1) and (solucion = TRUE) do
		begin
			j := ady[k][i];
			if (color[j] <> color[k]) then
				solucion := TRUE
			else
				solucion := FALSE;
			i := i + 1;
		end;
end;

{******************************************************************************
	Procedimiento numcolores

	Cuenta el numero de colores de la coloracion actual.

	Parametros: num -> Devuelve el numero de colores.
******************************************************************************}
procedure numcolores (var num: integer);

var
	i, aux: integer;

begin
	i := 1;
	aux := 0;
	while (i <= numnodos) do
		begin
			if (color[i] > aux) then
				aux := color[i];
			i := i + 1;
		end;
	num := aux;
end;

{******************************************************************************
	Procedimiento coloracion

	Procedimiento Branch&Bound recursivo que lleva a cabo la
	coloracion de los nodos.

	Parametros: color: Array con la coloracion que se esta llevando a
			   cabo.
		    k: nodo que se esta tratando
******************************************************************************} 
procedure coloracion (var color: A; k: integer);

var
    sol: boolean;
    num: integer;

begin
	color[k] := 0;
	while (color[k] < (niveloptimo - 1)) do
		begin
			color[k] := color[k] + 1;
			essolucion (k, sol);
			numcolores (num);
			if (sol = TRUE) and (num < niveloptimo) then
				begin
					if k = numnodos then
						begin
							mejorcolor := color;
							niveloptimo := num;
						end
				else
					coloracion (color, k + 1);
		end;
	end;
end;

begin
   pedirdatos;
   niveloptimo := numnodos;
   coloracion (color, 1);
   mostrarresultados;
end.
