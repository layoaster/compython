<Program> -> program id ; <BlockBody> .

<BlockBody> -> <ConstantDefinitionPart> <TypeDefinitionPart> <VariableDefinitionPart> <ProcedureDefinition> <CompoundStatement>

<ConstantDefinitionPart> -> const <ConstantDefinition> <ConstantDefinition2> | ε

<ConstantDefinition> -> id = <Constant> ;

<ConstantDefinition2> -> <ConstantDefinition> <ConstantDefinition2> | ε

<TypeDefinitionPart> -> type <TypeDefinition> <TypeDefinition2> | ε

<TypeDefinition> -> id = <NewType> ;

<TypeDefinition2> -> <TypeDefinition> <TypeDefinition2> | ε

<NewType> -> <NewArrayType> | <NewRecordType>

<NewArrayType> -> array [ <IndexRange> ] of id

<IndexRange> -> <Constant> .. <Constant>

<NewRecordType> -> record <FieldList> end

<FieldList> -> <RecordSection> <FieldList2>

<FieldList2> -> ; <RecordSection> <FieldList2> | ε

<RecordSection> -> id <RecordSection2> : id

<RecordSection2> -> , id <RecordSection2> | ε

<VariableDefinitionPart> -> var <VariableDefinition> | ε

<VariableDefinition> -> <VariableGroup> ; <VariableDefinition2>

<VariableDefinition2> -> <VariableDefinition> | ε

<VariableGroup> -> id <VariableGroup2> : id

<VariableGroup2> -> , id <VariableGroup2> | ε

<ProcedureDefinition> -> <ProcedureDefinition2> | ε

<ProcedureDefinition2> -> procedure id <ProcedureBlock> ; <ProcedureDefinition>

<ProcedureBlock> -> ( <FormalParameterList> ) ; <BlockBody>

<FormalParameterList> -> <ParameterDefinition> <ParameterDefinition2> | ε

<ParameterDefinition> -> <Variable> <VariableGroup>

<ParameterDefinition2> -> ; <ParameterDefinition> <ParameterDefinition2> | ε

<Variable> -> var | ε

<Statement> -> id <StatementGroup> | <IfStatement> | <WhileStatement> | <CompoundStatement> | ε

<StatementGroup> -> <AssignamentStatement> | <ProcedureStatement>

<AssignamentStatement> -> <Selector2>  := <Expression>

<ProcedureStatement> -> ( <ActualParameterList> )  | ε

<ActualParameterList> -> <Expression> <Expression2>

<Expression2> -> , <Expression> <Expression2> | ε

<IfStatement> -> if <Expression> then <Statement> <IfStatement2>

<IfStatement2> -> else <Statement> | ε

<WhileStatement> -> while <Expression> do <Statement>

<CompoundStatement> -> begin <Statement> <Statement2> end

<Statement2> -> ; <Statement> <Statement2> | ε

<Expression> -> <SimpleExpression> <ExpressionGroup>

<ExpressionGroup> -> <RelationalOperator> <SimpleExpression> | ε

<RelationalOperator> -> < | = | > | <= | <> | >=

<SimpleExpression> -> <Sign> <Term> <SimpleExpressionGroup>

<Sign> -> <SignOperator> | ε

<SimpleExpressionGroup> -> <AdditiveOperator> <Term> <SimpleExpressionGroup> | ε

<SignOperator> -> + | -

<AdditiveOperator> -> + | - | or

<Term> -> <Factor> <Multiplying>

<Multiplying> -> <MultiplyingOperator> <Factor> <Multiplying> | ε

<MultiplyingOperator> -> * | div | mod | and

<Factor> -> numeral | id <Factor2> | ( <Expression> ) | not <Factor>

<Factor2> -> <Selector2> | ε

<Selector2> -> <Selector> <Selector2> | ε

<Selector> -> <IndexSelector> | <FieldSelector>

<IndexSelector> -> [ <Expression> ]

<FieldSelector> -> . id

<Constant> -> numeral | id
